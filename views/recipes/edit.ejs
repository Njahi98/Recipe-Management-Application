<!DOCTYPE html>
<html lang="en">
  <%-include('../partials/head.ejs')%>
  <body>
    <%-include('../partials/nav.ejs')%>
    <div class="page-container">
      <div id="content-wrap">
        <img src="/banner2.jpg" alt="">
        <div class="recipeCenterImgText">
          <p>CREATE RECIPE</p>
        </div>
        
        <form id="editForm" class="recipe-form" action="/recipes/<%= recipe._id %>" method="post" data-id="<%= recipe._id %>">          <div class="form-section">
            <label for="title">Recipe Title</label>
            <input type="text" id="title" name="title" value="<%=recipe.title %>" required>
          </div>

          <div class="form-section">
            <label for="description">Description</label>
            <textarea id="description" name="description" rows="4" required><%=recipe.description %></textarea>
          </div>

          <div class="form-section">
            <label for="image">Recipe Image</label>
            <input type="file" id="image" name="image" accept="image/*">
            <% if (recipe.imageId) { %>
              <div class="current-image">
                <img src="/recipes/image/<%= recipe.imageId %>" alt="Current recipe image" style="max-width: 200px;">
                <p>Current image</p>
              </div>
            <% } %>
          </div>

          <div class="form-row">
            <div class="form-section">
              <label for="cookingTime">Cooking Time (minutes)</label>
              <input type="number" id="cookingTime" name="cookingTime" value="<%=recipe.cookingTime %>" required>
            </div>
            <div class="form-section">
              <label for="category">Category</label>
              <select id="category" name="category" required>
                <option value="Breakfast">Breakfast</option>
                <option value="Lunch">Lunch</option>
                <option value="Dinner">Dinner</option>
                <option value="Dessert">Dessert</option>
                <option value="Snack">Snack</option>
              </select>
            </div>
            <div class="form-section">
              <label for="difficulty">Difficulty</label>
              <select id="difficulty" name="difficulty" required>
                <option value="Easy">Easy</option>
                <option value="Medium">Medium</option>
                <option value="Hard">Hard</option>
              </select>
            </div>
          </div>

          <div class="form-section">
            <label>Ingredients</label>
            <div id="ingredients-container">
              
            </div>
            <button type="button" id="add-ingredient" class="add-btn">Add Ingredient</button>
          </div>

          <div class="form-section">
            <label>Instructions</label>
            <div id="instructions-container">
            </div>
            <button type="button" id="add-instruction" class="add-btn">Add Step</button>
          </div>

          <div class="form-actions">
            <button type="submit" class="submit-btn">Update Recipe</button>
            <a href="/recipes" class="cancel-btn">Cancel</a>
          </div>
        </form>
      </div>
    </div>

    <%-include('../partials/footer.ejs')%>

    <script>

        //choose default value for select tags from the fetched recipe
        document.getElementById('category').value=`<%= recipe.category %>`;
        document.getElementById('difficulty').value=`<%= recipe.difficulty %>`;
        
        const ingredientsContainer = document.getElementById('ingredients-container');
        const ingredients = `<%- JSON.stringify(recipe.ingredients) %>`

        let ingredientsHTML=document.createElement('div');
        let ingredientCount = -1;

        JSON.parse(ingredients).forEach((ingredient) => {
          ingredientCount++;
        const newRow = document.createElement('div');
        newRow.className = 'ingredient-row';
        newRow.innerHTML = `
          <input type="text" name="ingredients[${ingredientCount}][item]" placeholder="Item"   value="${ingredient.item}" required>
          <input type="text" name="ingredients[${ingredientCount}][amount]" placeholder="amount" value="${ingredient.amount}" required>
          <input type="text" name="ingredients[${ingredientCount}][unit]" placeholder="unit"   value="${ingredient.unit}" required>
          <button type="button" class="remove-ingredient">×</button>
        `;
        ingredientsContainer.appendChild(newRow);
        });
        
      const addIngredientBtn = document.getElementById('add-ingredient');
      addIngredientBtn.addEventListener('click', () => {
        ingredientCount++;
        const newRow = document.createElement('div');
        newRow.className = 'ingredient-row';
        newRow.innerHTML = `
          <input type="text" name="ingredients[${ingredientCount}][item]" placeholder="Item" required>
          <input type="text" name="ingredients[${ingredientCount}][amount]" placeholder="Amount" required>
          <input type="text" name="ingredients[${ingredientCount}][unit]" placeholder="Unit" required>
          <button type="button" class="remove-ingredient">×</button>
        `;
        ingredientsContainer.appendChild(newRow);
      });

      let instructionCount = -1;
      const instructionsContainer = document.getElementById('instructions-container');
      const addInstructionBtn = document.getElementById('add-instruction');

      const instructions = `<%- JSON.stringify(recipe.instructions) %>`
        JSON.parse(instructions).forEach((instruction)=>{
          instructionCount++;

        const newRow = document.createElement('div');
        newRow.className = 'instruction-row';
        newRow.innerHTML = `
          <span class="step-number">${instructionCount + 1}</span>
          <textarea name="instructions[${instructionCount}][text]" placeholder="Enter instruction step" required>${instruction.text}</textarea>
          <button type="button" class="remove-instruction">×</button>
        `;
        instructionsContainer.appendChild(newRow);

        })

      addInstructionBtn.addEventListener('click', () => {
        instructionCount++;
        const newRow = document.createElement('div');
        newRow.className = 'instruction-row';
        newRow.innerHTML = `
          <span class="step-number">${instructionCount + 1}</span>
          <textarea name="instructions[${instructionCount}][text]" placeholder="Enter instruction step" required></textarea>
          <button type="button" class="remove-instruction">×</button>
        `;
        instructionsContainer.appendChild(newRow);
      });

      document.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-ingredient')) {
          e.target.parentElement.remove();
          updateIngredientIndices();
        }
        if (e.target.classList.contains('remove-instruction')) {
          e.target.parentElement.remove();
          updateInstructionIndices();
        }
      });

      function updateIngredientIndices() {
        const rows = ingredientsContainer.getElementsByClassName('ingredient-row');
        Array.from(rows).forEach((row, index) => {
          row.querySelectorAll('input').forEach(input => {
            const fieldName = input.name.match(/\[(item|amount|unit)\]/)[1];
            input.name = `ingredients[${index}][${fieldName}]`;
          });
        });
        ingredientCount = rows.length - 1;
      }

      function updateInstructionIndices() {
        const rows = instructionsContainer.getElementsByClassName('instruction-row');
        Array.from(rows).forEach((row, index) => {
          row.querySelector('.step-number').textContent = index + 1;
          row.querySelector('textarea').name = `instructions[${index}][text]`;
        });
        instructionCount = rows.length - 1;
      }

      document.getElementById('editForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    
    // Create arrays to store ingredients and instructions
    const ingredients = [];
    const instructions = [];
    
    // Group form data into proper objects
    const formEntries = Array.from(formData.entries());
    formEntries.forEach(([key, value]) => {
        if (key.startsWith('ingredients[')) {
            const matches = key.match(/ingredients\[(\d+)\]\[(\w+)\]/);
            if (matches) {
                const [_, index, field] = matches;
                if (!ingredients[index]) {
                    ingredients[index] = {};
                }
                ingredients[index][field] = value;
            }
        } else if (key.startsWith('instructions[')) {
            const matches = key.match(/instructions\[(\d+)\]\[(\w+)\]/);
            if (matches) {
                const [_, index, field] = matches;
                if (!instructions[index]) {
                    instructions[index] = {};
                }
                instructions[index][field] = value;
            }
        }
    });

    // Filter out any empty slots in arrays
    const cleanIngredients = ingredients.filter(Boolean);
    const cleanInstructions = instructions.filter(Boolean);

    // If there's a file, use FormData
    if (formData.get('image').size > 0) {
        // Create new FormData with cleaned arrays
        const cleanFormData = new FormData();
        
        // Add non-array fields
        formEntries.forEach(([key, value]) => {
            if (!key.startsWith('ingredients[') && !key.startsWith('instructions[')) {
                cleanFormData.append(key, value);
            }
        });

        // Add cleaned arrays
        cleanIngredients.forEach((ing, index) => {
            cleanFormData.append(`ingredients[${index}][item]`, ing.item);
            cleanFormData.append(`ingredients[${index}][amount]`, ing.amount);
            cleanFormData.append(`ingredients[${index}][unit]`, ing.unit);
        });

        cleanInstructions.forEach((inst, index) => {
            cleanFormData.append(`instructions[${index}][text]`, inst.text);
        });

        // Send request
        fetch(`/recipes/${this.dataset.id}`, {
            method: 'PUT',
            body: cleanFormData
        })
        .then(response => response.json())
        .then(handleResponse)
        .catch(handleError);
    } else {
        // No new image, send as JSON
        const jsonData = {
            title: formData.get('title'),
            description: formData.get('description'),
            cookingTime: formData.get('cookingTime'),
            category: formData.get('category'),
            difficulty: formData.get('difficulty'),
            ingredients: cleanIngredients,
            instructions: cleanInstructions
        };

        fetch(`/recipes/${this.dataset.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(jsonData)
        })
        .then(response => response.json())
        .then(handleResponse)
        .catch(handleError);
    }
});

function handleResponse(data) {
    if(data.success) {
        window.location.href = '/recipes';
    } else {
        console.error('Update failed:', data.error);
    }
}

function handleError(error) {
    console.error('Error:', error);
}
    </script>
  </body>
</html>