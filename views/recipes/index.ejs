<!DOCTYPE html>
<html lang="en">
  <%-include('../partials/head.ejs')%>
  <body>
    <%-include('../partials/nav.ejs')%>
    <div class="page-container">

      <div id="content-wrap">
          <img src="/banner2.jpg" alt="">
          <div class="recipeCenterImgText">
            <p>RECIPES</p>
          </div>
          <div class="newRecipe">
            <div class="filter-inputs">
              <p style="transform: translateX(150%);">üîç</p>
              <input class="search-bar" type="text" name="search" placeholder="Search by title...">
              <select style="margin-left: 1rem;" class="category-bar">
                <option value="">category</option>
                <option value="Breakfast">Breakfast</option>
                <option value="Lunch">Lunch</option>
                <option value="Dinner">Dinner</option>
                <option value="Dessert">Dessert</option>
                <option value="Snack">Snack</option>
              </select>
              <select style="margin-left: 1rem;" class="difficulty-bar">
                <option value="">difficulty</option>
                <option value="Easy">Easy</option>
                <option value="Medium">Medium</option>
                <option value="Hard">Hard</option>
              </select>
              <div><p class="cooking-times-range-text" style="color: #333; margin: 0">Cooking Time(mins)</p><input type="range" name="cookingTimeRange" class="cooking-time-range" min="1" max="240">
              </div>
            </div>
            <a href="/recipes/create"><button class="newRecipeButton" >Add a new Recipe</button>
            </a>
          </div>
          <div class="recipe-container">
          <%  if(recipes.length){ %>
              <%   recipes.forEach((recipe)=>{ %>
                <div class="recipe-card">
                  <p style="margin: 0; color: #333;" class="recipe-title"><%=recipe.title %></p>
              <div style="display: flex;gap: 1rem;color: #666; ">
                 <p class="cooking-times" style="text-align: start;">üïõ <%=recipe.cookingTime %>min</p>
                  <p class="recipe-difficulty"> <%=recipe.difficulty %></p>
                  <p class="recipe-category"> <%=recipe.category %></p>
              </div> 
              <img src="/recipes/image/<%= recipe.imageId %>" alt="Current recipe image" style="max-width: 200px;">

                <p style="margin-top: 0; color: #555"><%=recipe.description %> <p>
                <div style="display: flex; justify-content: space-between ;">
                  <a href="/recipes/<%= recipe._id %>" class="viewRecipeBtn">View Recipe</a>
                  <button class="deleteRecipeBtn" data-doc="<%= recipe._id %>">Delete</button>
                </div>
                
                </div>
             <%  })  %>
            <%} %>
          
          </div>
      </div>

    <%-include('../partials/footer.ejs')%>
    <script>
    const trashcan = document.querySelector('.deleteRecipeBtn');

  trashcan.addEventListener('click', (e) => {
  const endpoint = `/recipes/${trashcan.dataset.doc}`;

  fetch(endpoint, {
    method: 'DELETE',
  })
  .then(response => response.json())
  .then(data => window.location.href = data.redirect)
  .catch(err => console.log(err));
});

//filter by title function
  const recipesString = `<%- JSON.stringify(recipes) %>`
  const recipes = JSON.parse(recipesString).map(recipe=>recipe)

  const titles = JSON.parse(recipesString).map(recipe =>recipe.title)
  const searchBar = document.querySelector('.search-bar')
  const recipeNames = document.querySelectorAll('.recipe-container .recipe-title')

  function filterByTitle() {
  
  const regex = new RegExp(this.value, 'i');

  // If the search bar is empty, show all cards
  if (!this.value.trim()) {
    recipeNames.forEach((recipeName) => {
      // Reset display
      recipeName.parentElement.style.display = ""; 
    });
    //return nothing to end the function execution
    return;
  }

  recipeNames.forEach((recipeName) => {
    // Get card title and remove extra spaces
    const title = recipeName.textContent.trim(); 
    if (regex.test(title)) {
      // Show matching cards
      recipeName.parentElement.style.display = ""; 
    } else {
      // Hide non-matching cards
      recipeName.parentElement.style.display = "none"; 
    }
  });
}

//filter by category
const categorySelect = document.querySelector('.category-bar')
const recipeCategories = document.querySelectorAll('.recipe-container .recipe-category')

function filterByCategory(){
  if(!this.value.trim()){
    recipeCategories.forEach((recipeCategory)=>{
      recipeCategory.parentElement.parentElement.style.display=""
    })
    return;
  }
  
  recipeCategories.forEach((recipeCategory)=>{
    if(recipeCategory.textContent.trim() ==this.value.trim()){
      recipeCategory.parentElement.parentElement.style.display=""
    }else{
      recipeCategory.parentElement.parentElement.style.display="none"
    }
  })
}


//filter by difficulty
const difficultySelect = document.querySelector('.difficulty-bar')
const recipeDifficulties = document.querySelectorAll('.recipe-container .recipe-difficulty')

function filterByDifficulty(){
  if(!this.value.trim()){
    recipeDifficulties.forEach((recipeDifficulty)=>{
      recipeDifficulty.parentElement.parentElement.style.display=""
    })
    return;
  }
  
  recipeDifficulties.forEach((recipeDifficulty)=>{
    if(recipeDifficulty.textContent.trim() ==this.value.trim()){
      recipeDifficulty.parentElement.parentElement.style.display=""
    }else{
      recipeDifficulty.parentElement.parentElement.style.display="none"
    }
  })
}



//filter by cooking time
const cookingTimeRange= document.querySelector('.cooking-time-range');
const cookingTimes = document.querySelectorAll('.recipe-container .cooking-times')
const timetext = document.querySelector('.cooking-times-range-text')

function ShowRangeValue(){
let num=this.value;
timetext.textContent=`Cooking Time(mins) ${num}`
}
function filterbyTime(){
cookingTimes.forEach(cookingTime=>{
  const num =cookingTime.textContent.replace(/[^0-9]/g, '');
  if(parseInt(num)>1 && parseInt(num)<=this.value){
    cookingTime.parentElement.parentElement.style.display="";
  }else{
    cookingTime.parentElement.parentElement.style.display="none";
  }
})
}



  searchBar.addEventListener('keyup',filterByTitle);
  searchBar.addEventListener('change',filterByTitle)

  difficultySelect.addEventListener('change',filterByDifficulty)
  categorySelect.addEventListener('change',filterByCategory)


  cookingTimeRange.addEventListener('change',ShowRangeValue)
  cookingTimeRange.addEventListener('mousemove',ShowRangeValue)
  cookingTimeRange.addEventListener('change',filterbyTime)

  
    </script>
  </body>
</html>
